---
openapi: "3.0.0"
info:
  title: "Ostrich API"
  description: "This is the API for Day Flow, the time-scheduling application from\
    \ Team Optimistic Ostriches."
  contact:
    email: "teamostrich@gatech.edu"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
  version: "1.0.0"
servers:
- url: "https://headburied.azurewebsites.net/"
  description: "Live Service on Azure"
- url: "https://virtserver.swaggerhub.com/mliang1987/OstrichAPI/1.0.0"
  description: "SwaggerHub API Auto Mocking"
tags:
- name: "users"
  description: "Secured Admin-only calls for user management."
- name: "tasks"
  description: "Operations available to regular users for task creation, deletion,\
    \ and modification"
- name: "sessions"
  description: "Operations available to regular users for creating a session using\
    \ given parameters."
paths:
  /api/users/:
    get:
      tags:
      - "users"
      description: "Return all users"
      operationId: "getUsers"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/User"
        "500":
          description: "Server error"
    post:
      tags:
      - "users"
      description: "Add a new user and return the newly created object"
      operationId: "addUser"
      requestBody:
        description: "User object to be added (the ID field is irrelevant, as it will\
          \ be generated by the server and returned, and should be left empty for\
          \ clarity)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "201":
          description: "Successful creation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad request"
        "409":
          description: "Resource conflict"
        "500":
          description: "Server error"
  /api/users/{userId}:
    get:
      tags:
      - "users"
      description: "Get user by ID"
      operationId: "getUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user for which the request is being submitted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad request"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "users"
      description: "Update a user and return the updated object"
      operationId: "updateUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user for which the request is being submitted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        description: "Updated user object (the ID field is irrelevant and should be\
          \ left empty for clarity)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad request"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
    delete:
      tags:
      - "users"
      description: "Delete a user and return the deleted object"
      operationId: "deleteUser"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of the user for which the request is being submitted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "400":
          description: "Bad request"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
  /api/users/{userId}/tasks:
    get:
      tags:
      - "tasks"
      description: "Return all tasks for a given user"
      operationId: "getTasks"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user who owns the projects"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: "array"
                items:
                  $ref: "#/components/schemas/Task"
        "400":
          description: "Bad request"
        "404":
          description: "User not found"
        "500":
          description: "Server error"
    post:
      tags:
      - "tasks"
      description: "Add a new task and return the newly created object"
      operationId: "addTask"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user who owns the projects"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        description: "Task object to be added (the ID field is irrelevant, as it will\
          \ be generated by the server and returned, and should be left empty for\
          \ clarity)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "201":
          description: "Successful creation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: "Bad request"
        "404":
          description: "User not found"
        "409":
          description: "Resource conflict"
        "500":
          description: "Server error"
  /api/users/{userId}/tasks/{taskId}:
    get:
      tags:
      - "tasks"
      description: "Get task by ID for a given user"
      operationId: "getTask"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user who owns the task"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - name: "taskId"
        in: "path"
        description: "ID of the task for which the request is being submitted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: "Bad request"
        "404":
          description: "User or task not found"
        "500":
          description: "Server error"
    put:
      tags:
      - "tasks"
      description: "Update a tasks and return the updated object"
      operationId: "updateTask"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user who owns the task"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - name: "taskId"
        in: "path"
        description: "ID of the task for which the request is being submitted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      requestBody:
        description: "Updated task object (the ID field is irrelevant and should be\
          \ left empty for clarity)"
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Task"
        required: true
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: "Bad request"
        "404":
          description: "User or project not found"
        "409":
          description: "Resource conflict"
        "500":
          description: "Server error"
    delete:
      tags:
      - "tasks"
      description: "Delete a task and return the deleted object"
      operationId: "deleteTask"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user who owns the task"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      - name: "taskId"
        in: "path"
        description: "ID of the task for which the request is being submitted"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "400":
          description: "Bad request"
        "404":
          description: "User or project not found"
        "500":
          description: "Server error"
  /api/users/{userId}/session:
    get:
      tags:
      - "sessions"
      description: "Gets a session of tasks."
      operationId: "getSession"
      parameters:
      - name: "userId"
        in: "path"
        description: "ID of user who owns the task"
        required: true
        style: "simple"
        explode: false
        schema:
          type: "integer"
          format: "int64"
      responses:
        "200":
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Session"
        "400":
          description: "Bad request"
        "404":
          description: "User or task not found"
        "500":
          description: "Server error"
components:
  schemas:
    User:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        first_name:
          type: "string"
        last_name:
          type: "string"
        email_address:
          type: "string"
          format: "email"
    Task:
      type: "object"
      properties:
        id:
          type: "integer"
          format: "int64"
        subject:
          type: "string"
        difficulty:
          type: "integer"
          format: "int64"
        urgency:
          type: "integer"
          format: "int64"
        length:
          type: "number"
          format: "float"
    Session:
      type: "object"
      properties:
        tasks:
          type: "array"
          items:
            type: "object"
            properties:
              taskId:
                type: "integer"
                format: "int64"
              taskName:
                type: "string"
              taskLength:
                type: "number"
                format: "float"
